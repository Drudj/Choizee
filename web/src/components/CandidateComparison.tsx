import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { Job, CandidateWithJob } from '../types';
import { api } from '../services/api';
import RadarChart from './RadarChart';

interface CandidateEvaluation {
  candidateId: number;
  candidateName: string;
  overallScore: number;
  criteriaScores: { [criterion: string]: number };
  notes: string;
  status: 'not_evaluated' | 'evaluated';
}

const CandidateComparison: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  
  const [job, setJob] = useState<Job | null>(null);
  const [candidates, setCandidates] = useState<CandidateWithJob[]>([]);
  const [criteria, setCriteria] = useState<string[]>([]);
  const [evaluations, setEvaluations] = useState<CandidateEvaluation[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (id) {
      loadData();
    }
  }, [id]);

  const loadData = async () => {
    if (!id) return;
    
    try {
      setLoading(true);
      
      const [jobData, candidatesData] = await Promise.all([
        api.getJob(Number(id)),
        api.getJobCandidates(Number(id))
      ]);
      
      setJob(jobData);
      setCandidates(candidatesData || []);
      
      // –ü–∞—Ä—Å–∏–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏
      const jobCriteria = JSON.parse(jobData.criteria || '[]');
      setCriteria(jobCriteria);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –∏–∑ API
      try {
        const evaluationsSummary = await api.getJobEvaluationsSummary(Number(id));
        const realEvaluations = processEvaluationsSummary(candidatesData || [], evaluationsSummary, jobCriteria);
        setEvaluations(realEvaluations);
      } catch {
        // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
        const emptyEvaluations = (candidatesData || []).map(candidate => ({
          candidateId: candidate.id!,
          candidateName: candidate.name,
          overallScore: 0,
          criteriaScores: {},
          notes: '',
          status: 'not_evaluated' as const
        }));
        setEvaluations(emptyEvaluations);
      }

    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –≤ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const processEvaluationsSummary = (candidates: CandidateWithJob[], summaries: any[], criteria: string[]): CandidateEvaluation[] => {
    return candidates.map(candidate => {
      // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
      const summary = summaries.find(s => s.candidate_id === candidate.id);
      
      if (summary && summary.evaluations.length > 0) {
                 // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ü–µ–Ω–∫–∏ –≤ –æ–±—ä–µ–∫—Ç —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
         const criteriaScores: { [key: string]: number } = {};
         summary.evaluations.forEach((evaluation: any) => {
           criteriaScores[evaluation.criterion] = evaluation.score;
         });
        
        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
        const scores = Object.values(criteriaScores);
        const overallScore = scores.length > 0 ? Math.round(scores.reduce((sum, score) => sum + score, 0) / scores.length) : 0;
        
        return {
          candidateId: candidate.id!,
          candidateName: candidate.name,
          overallScore,
          criteriaScores,
          notes: summary.evaluations.map((e: any) => e.comments).filter(Boolean).join('; '),
          status: 'evaluated'
        };
      }
      
      // –ï—Å–ª–∏ –æ—Ü–µ–Ω–æ–∫ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å
      return {
        candidateId: candidate.id!,
        candidateName: candidate.name,
        overallScore: 0,
        criteriaScores: {},
        notes: '',
        status: 'not_evaluated'
      };
    });
  };

  const getScoreColor = (score: number) => {
    if (score >= 8) return '#10b981'; // green
    if (score >= 6) return '#f59e0b'; // yellow
    if (score >= 4) return '#f97316'; // orange
    return '#ef4444'; // red
  };

  const getScoreLabel = (score: number) => {
    if (score >= 9) return '–û—Ç–ª–∏—á–Ω–æ';
    if (score >= 8) return '–•–æ—Ä–æ—à–æ';
    if (score >= 6) return '–°—Ä–µ–¥–Ω–µ';
    if (score >= 4) return '–ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ';
    return '–ü–ª–æ—Ö–æ';
  };

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
  const getCandidateColor = (index: number) => {
    const colors = [
      '#3b82f6', // —Å–∏–Ω–∏–π
      '#ef4444', // –∫—Ä–∞—Å–Ω—ã–π  
      '#10b981', // –∑–µ–ª–µ–Ω—ã–π
      '#f59e0b', // –∂–µ–ª—Ç—ã–π
      '#8b5cf6', // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
      '#06b6d4', // –≥–æ–ª—É–±–æ–π
      '#f97316', // –æ—Ä–∞–Ω–∂–µ–≤—ã–π
      '#84cc16', // –ª–∞–π–º
    ];
    return colors[index % colors.length];
  };

  const exportToCSV = () => {
    const headers = ['–ö–∞–Ω–¥–∏–¥–∞—Ç', '–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞', ...criteria, '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è'];
    const rows = evaluations.map(evaluation => [
      evaluation.candidateName,
      evaluation.overallScore.toString(),
      ...criteria.map(criterion => evaluation.criteriaScores[criterion]?.toString() || '0'),
      evaluation.notes
    ]);
    
    const csvContent = [headers, ...rows]
      .map(row => row.map(cell => `"${cell}"`).join(','))
      .join('\n');
    
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `comparison_${job?.title || 'candidates'}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  if (loading) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  if (error) {
    return (
      <div className="card">
        <div className="card-content text-center">
          <h3>–û—à–∏–±–∫–∞</h3>
          <p>{error}</p>
          <button className="btn btn-primary" onClick={() => navigate(-1)}>
            –ù–∞–∑–∞–¥
          </button>
        </div>
      </div>
    );
  }

  if (!job) {
    return (
      <div className="card">
        <div className="card-content text-center">
          <h3>–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h3>
          <button className="btn btn-primary" onClick={() => navigate('/')}>
            ‚Üê –ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º
          </button>
        </div>
      </div>
    );
  }

  const evaluatedCandidates = evaluations.filter(e => e.status === 'evaluated');
  const notEvaluatedCandidates = evaluations.filter(e => e.status === 'not_evaluated');

  return (
    <div>
      <div className="page-header">
        <div>
          <button className="btn btn-outline" onClick={() => navigate(`/jobs/${id}/candidates`)}>
            ‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º
          </button>
          <h2 className="mt-4">üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {job.title}</h2>
        </div>
        <div className="flex flex-gap">
          <button 
            className="btn btn-secondary"
            onClick={exportToCSV}
            disabled={evaluatedCandidates.length === 0}
          >
            üì• –≠–∫—Å–ø–æ—Ä—Ç CSV
          </button>
          <Link 
            to={`/jobs/${id}/candidates`}
            className="btn btn-primary"
          >
            üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏
          </Link>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-3 mb-6">
        <div className="stat-card">
          <div className="stat-number">{candidates.length}</div>
          <div className="stat-label">–í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤</div>
        </div>
        <div className="stat-card">
          <div className="stat-number">{evaluatedCandidates.length}</div>
          <div className="stat-label">–û—Ü–µ–Ω–µ–Ω–æ</div>
        </div>
        <div className="stat-card">
          <div className="stat-number">{criteria.length}</div>
          <div className="stat-label">–ö—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Ü–µ–Ω–∫–∏</div>
        </div>
      </div>

      {notEvaluatedCandidates.length > 0 && (
        <div className="card mb-6">
          <div className="card-content">
            <h3>‚ö†Ô∏è –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –±–µ–∑ –æ—Ü–µ–Ω–∫–∏</h3>
            <p className="text-muted mb-4">
              –°–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é:
            </p>
            <div className="flex flex-gap">
              {notEvaluatedCandidates.map(evaluation => (
                <Link
                  key={evaluation.candidateId}
                  to={`/jobs/${id}/candidates/${evaluation.candidateId}/evaluation`}
                  className="btn btn-outline"
                >
                  üéØ {evaluation.candidateName}
                </Link>
              ))}
            </div>
          </div>
        </div>
      )}

      {evaluatedCandidates.length === 0 ? (
        <div className="card text-center">
          <div className="card-content">
            <h3>–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è</h3>
            <p className="text-muted mb-4">
              –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏, —á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–∏—Ç—å –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            </p>
            <Link 
              to={`/jobs/${id}/candidates`}
              className="btn btn-primary"
            >
              –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º
            </Link>
          </div>
        </div>
      ) : (
        <>
          {/* –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è */}
          <div className="card mb-6">
            <div className="card-content">
              <h3>üìã –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ</h3>
              <div className="comparison-table-container">
                <table className="comparison-table">
                  <thead>
                    <tr>
                      <th>–ö–∞–Ω–¥–∏–¥–∞—Ç</th>
                      <th>–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞</th>
                      {criteria.map(criterion => (
                        <th key={criterion}>{criterion}</th>
                      ))}
                      <th>–°—Ç–∞—Ç—É—Å</th>
                    </tr>
                  </thead>
                  <tbody>
                    {evaluatedCandidates
                      .sort((a, b) => b.overallScore - a.overallScore)
                      .map((evaluation, index) => (
                        <tr key={evaluation.candidateId} className={index === 0 ? 'top-candidate' : ''}>
                          <td className="candidate-name">
                            <div>
                              <strong>{evaluation.candidateName}</strong>
                              {index === 0 && <span className="top-badge">üèÜ –õ—É—á—à–∏–π</span>}
                            </div>
                          </td>
                          <td>
                            <div 
                              className="score-cell overall-score"
                              style={{ backgroundColor: getScoreColor(evaluation.overallScore) }}
                            >
                              <div className="score-value">{evaluation.overallScore}/10</div>
                              <div className="score-text">{getScoreLabel(evaluation.overallScore)}</div>
                            </div>
                          </td>
                          {criteria.map(criterion => {
                            const score = evaluation.criteriaScores[criterion] || 0;
                            return (
                              <td key={criterion}>
                                <div 
                                  className="score-cell"
                                  style={{ backgroundColor: getScoreColor(score) }}
                                >
                                  {score}/10
                                </div>
                              </td>
                            );
                          })}
                          <td>
                            <Link
                              to={`/jobs/${id}/candidates/${evaluation.candidateId}/evaluation`}
                              className="btn btn-sm btn-outline"
                            >
                              –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏
                            </Link>
                          </td>
                        </tr>
                      ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          {/* –õ–µ–ø–µ—Å—Ç–∫–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ */}
          <div className="card mb-6 radar-chart-container">
            <div className="card-content">
              <h3>üéØ –õ–µ–ø–µ—Å—Ç–∫–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è</h3>
              <p className="text-muted mb-4">
                –†–∞–¥–∞—Ä-–¥–∏–∞–≥—Ä–∞–º–º–∞ –≤ —Å—Ç–∏–ª–µ FIFA/PES –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
              </p>
              <div className="radar-chart-wrapper">
                <RadarChart
                  criteria={criteria}
                  candidates={evaluatedCandidates.map((evaluation, index) => ({
                    name: evaluation.candidateName,
                    scores: evaluation.criteriaScores,
                    color: getCandidateColor(index)
                  }))}
                  title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"
                />
              </div>
            </div>
          </div>

          {/* –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ */}
          <div className="card">
            <div className="card-content">
              <h3>üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ</h3>
              <div className="visual-comparison">
                {criteria.map(criterion => (
                  <div key={criterion} className="criterion-comparison">
                    <h4>{criterion}</h4>
                    <div className="candidates-bars">
                      {evaluatedCandidates.map(evaluation => {
                        const score = evaluation.criteriaScores[criterion] || 0;
                        return (
                          <div key={evaluation.candidateId} className="candidate-bar">
                            <div className="candidate-name-small">{evaluation.candidateName}</div>
                            <div className="progress-bar">
                              <div 
                                className="progress-fill"
                                style={{ 
                                  width: `${score * 10}%`,
                                  backgroundColor: getScoreColor(score)
                                }}
                              >
                                <span className="progress-text">{score}</span>
                              </div>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default CandidateComparison; 